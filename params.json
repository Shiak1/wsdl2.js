{"name":"wsdl2.js","tagline":"A NodeJS tool to consume a WSDL file and output a neat, manageable Javascript library.","body":"\r\n## Introduction\r\nThis is a NodeJS tool to consume a WSDL file and output a neat, manageable Javascript library. It is not 100% complete, but it gives us full coverage of the services we need at Holiday Extras. If it doesn't do everything you need, fork us and contribute back to the community :)\r\n\r\n## Where do I find it?\r\nEither get it from npm:\r\n```\r\nsudo npm install -g wsdl2.js\r\n```\r\nOr checkout the repo:\r\n```\r\ngit clone https://github.com/holidayextras/wsdl2.js.git\r\nnpm install\r\n```\r\n\r\n## How do I use it?\r\nThis will generate a folder called [serviceName] in the current directory ready to be require'd and used:\r\n```\r\nwsdl2.js [serviceName] [/local/path/to/wsdl]\r\n```\r\n\r\n## Requirements for using the generated code\r\nNote: these modules are installed by npm-installing wsdl2.js\r\n```\r\nnpm install request xml2json\r\n```\r\n\r\n## Generated code structure\r\n```\r\n./[ServiceName]/\r\n|   // This holds one file per defined Element within the WSDL\r\n├── Element\r\n│   ├── SomeDefinedElement.js\r\n|   └── ...\r\n|   // This is the main file which handles requests, JSON->XML->JSON, etc\r\n├── index.js\r\n|   // This is where mock data goes from [myService].Settings.createMock\r\n├── Mocks\r\n│   ├── WsdlOperationName.js\r\n|   └── ...\r\n|   // This library provides strong typing, it's used in each Element/Type\r\n├── Modeler.js\r\n|   // This file defines the top level functionality found within the WSDL\r\n├── ServiceDefinition.js\r\n|   // This holds one file per defined Type within the WSDL\r\n└── Type\r\n    ├── SomeDefinedType.js\r\n    └── ...\r\n```\r\n\r\n## Using the generated code\r\nStart by including the generated code:\r\n```javascript\r\nvar Service = require(\"path/to/generated/code\");\r\nvar EC2 = require(\"lib/EC2\");\r\n```\r\nThis is how we create a new request:\r\n```javascript\r\nvar someRequest = new Service.[WSDL-Binding-Name].[WSDL-Operation-Name]();\r\nvar assignRequest = new EC2.AmazonEC2Port.AssignPrivateIpAddresses();\r\n```\r\nSetting basic properties is trivial\r\n```javascript\r\nsomeRequest.someSimpleProperty = 1;\r\n```\r\nMost requests consist of several complex types, they are all found within our service object:\r\n```javascript\r\nsomeRequest.someElementProperty = new Service.Elements.[WSDL-Element-Name]();\r\nsomeRequest.someTypeProperty = new Service.Types.[WSDL-Type-Name]();\r\n```\r\nPopulating Requests/Elements/Types can be done one at a time:\r\n```javascript\r\nsomeRequest.someNumber = 1;\r\nsomeRequest.someString = \"1\";\r\n```\r\nWe can also populate directly from a JSON object:\r\n```javascript\r\nvar json = { someNumber: 1, someString: \"1\" };\r\nsomeRequest = new Service.TestRequest(json);\r\n// someRequest.someNumber == 1\r\n// someRequest.someString == \"1\"\r\n```\r\nTrying to set a property's value to an invalid type will be discarded:\r\n```javascript\r\nsomeRequest.PersonElement = null;\r\nsomeRequest.PersonElement = new SomeRandomObject();\r\n// someRequest.PersonElement == null;\r\n```\r\nIf we have an array of objects there's a helper function to save typing:\r\n```javascript\r\nsomeRequest.PeopleList = new Service.Types.ArrayOfPeople;\r\nsomeRequest.PeopleList.newChild({ firstname: \"Oli\", age: 24 });\r\n// is the equivalent of:\r\nsomeRequest.PeopleList = new Service.Types.ArrayOfPeople;\r\nvar newPerson = new Service.Types.Person();\r\nnewPerson.firstname = \"Oli\";\r\nnewPerson.age = 24;\r\nsomeRequest.PeopleList.push(newPerson);\r\n```\r\nMaking the request is trivial:\r\n```javascript\r\nsomeRequest.request(function(err, response) {\r\n  // 'response' is a modeled object, it WILL conform to the WSDL.\r\n  //... w00p!\r\n});\r\n```\r\nOnce we have a request and we want to edit it by adding properties not found in the WDSL, we must first extract the data from the response:\r\n```javascript\r\nsomeRequest.request(function(err, response) {\r\n  response.SomeInvalidProperty = \"testing\";\r\n  // response.SomeInvalidProperty == null\r\n  var myResponse = response.extract();\r\n  myResponse.SomeInvalidProperty = \"testing\";\r\n  // myResponse.SomeInvalidProperty == \"testing\"\r\n});\r\n```\r\n\r\n## Runtime Settings and Debugging\r\n```javascript\r\nvar Service = require(\"path/to/generated/code\");\r\n\r\n// This next statement will enable debugging for ALL soap requests\r\n// It prints to stdout JSON objects, XML documents, etc\r\n// default: false\r\nService.Settings.debugSoap = true;\r\n\r\n// This next statement will enable benchmarking for ALL soap requests\r\n// It prints to stdout the name of each request and its duration in ms\r\n// default: true\r\nService.Settings.benchmark = true;\r\n\r\n// This next statement will store the most recent request of each type to file\r\n// It outputs to [/path/to/generated/code]/Mocks/[request-name]\r\n// default: false\r\nService.Settings.createMock = true;\r\n\r\n// This next statement will use saved mock requests instead of real requests\r\n// default: false\r\nService.Settings.useMock = true;\r\n\r\n// We can debug single SOAP requests by using the .debug() function, which is\r\n// a property of every request and response object\r\nvar additionRequest = new Service.MathService.AdditionFunction(json);\r\nadditionRequest.debug(); // Watch your console output\r\nadditionRequest.request(function(err, response) {\r\n  response.debug(); // Watch your console output\r\n  if (err || !response) {\r\n    return callback(err || \"No response?\");\r\n  }\r\n  \r\n  //... w00p!\r\n});\r\n```\r\n\r\n## Checking the generated service definition\r\nGeneric example of ./[ServiceName]/ServiceDefinition.js:\r\n```javascript\r\nmodule.exports = {\r\n  \"[WSDL-Binding-Name]\": {\r\n    \"namespace\": \"http://blahblah.com/webservices/\",\r\n    \"serviceUrl\": \"https://www.blahblah.com/path/to/service.blah\",\r\n    \"[WSDL-Operation-Name]\": {\r\n      \"soapAction\": \"blahblahblah\",\r\n      \"input\": \"[Top-Level-Request-Element-For-Operation]\",\r\n      \"output\": \"[Top-Level-Response-Element-For-Operation]\"\r\n    },\r\n    ...\r\n  },\r\n  ...\r\n}\r\n```\r\nExample of Amazon's EC2 service:\r\n```javascript\r\nmodule.exports = {\r\n  \"AmazonEC2Port\": {\r\n    \"namespace\": \"http://ec2.amazonaws.com/doc/2013-02-01/\",\r\n    \"serviceUrl\": \"https://ec2.amazonaws.com/\",\r\n    \"ActivateLicense\": {\r\n      \"soapAction\": \"ActivateLicense\",\r\n      \"input\": \"ElementActivateLicense\",\r\n      \"output\": \"ElementActivateLicenseResponse\"\r\n    },\r\n    \"AssignPrivateIpAddresses\": {\r\n      \"soapAction\": \"AssignPrivateIpAddresses\",\r\n      \"input\": \"ElementAssignPrivateIpAddresses\",\r\n      \"output\": \"ElementAssignPrivateIpAddressesResponse\"\r\n    },\r\n    ...\r\n  },\r\n  ...\r\n}\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}